/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.174.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SbomAPIService SbomAPI service
type SbomAPIService service

type ApiDeleteSbomVersionRequest struct {
	ctx context.Context
	ApiService *SbomAPIService
	applicationId string
	sbomVersion string
}

func (r ApiDeleteSbomVersionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSbomVersionExecute(r)
}

/*
DeleteSbomVersion Delete sbom version

Deletes a specific sbom version including it's original contents and updates

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId The internal id of the application
 @param sbomVersion URL Encoded version value of the sbom to be deleted
 @return ApiDeleteSbomVersionRequest
*/
func (a *SbomAPIService) DeleteSbomVersion(ctx context.Context, applicationId string, sbomVersion string) ApiDeleteSbomVersionRequest {
	return ApiDeleteSbomVersionRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
		sbomVersion: sbomVersion,
	}
}

// Execute executes the request
func (a *SbomAPIService) DeleteSbomVersionExecute(r ApiDeleteSbomVersionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SbomAPIService.DeleteSbomVersion")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/sbom/{applicationId}/version/{sbomVersion}"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sbomVersion"+"}", url.PathEscape(parameterValueToString(r.sbomVersion, "sbomVersion")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSbomVersionRequest struct {
	ctx context.Context
	ApiService *SbomAPIService
	applicationId string
	sbomVersion string
	form *string
	accept *string
}

// The form of the sbom version. Allowed values [original|current]. default &#x3D; current
func (r ApiGetSbomVersionRequest) Form(form string) ApiGetSbomVersionRequest {
	r.form = &form
	return r
}

// Output format(json/xml) of the sbom. Changing the output format only applicable when downloading the current form of the SBOM. The original sbom will always return in the original form that it was ingested. When requesting &#x60;current&#x60; form and if this header value is not present the sbom will be returned in its original ingested format. Allowed values {&#39;application/json&#39;|&#39;application/xml&#39;}. default &#x3D; null
func (r ApiGetSbomVersionRequest) Accept(accept string) ApiGetSbomVersionRequest {
	r.accept = &accept
	return r
}

func (r ApiGetSbomVersionRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetSbomVersionExecute(r)
}

/*
GetSbomVersion Gets a sbom version

Downloads a specific sbom version in its original or current form

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId The internal id of the application
 @param sbomVersion URL Encoded version value of the sbom to be deleted
 @return ApiGetSbomVersionRequest
*/
func (a *SbomAPIService) GetSbomVersion(ctx context.Context, applicationId string, sbomVersion string) ApiGetSbomVersionRequest {
	return ApiGetSbomVersionRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
		sbomVersion: sbomVersion,
	}
}

// Execute executes the request
func (a *SbomAPIService) GetSbomVersionExecute(r ApiGetSbomVersionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SbomAPIService.GetSbomVersion")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/sbom/{applicationId}/version/{sbomVersion}"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sbomVersion"+"}", url.PathEscape(parameterValueToString(r.sbomVersion, "sbomVersion")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.form != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "form", r.form, "")
	} else {
		var defaultValue string = "current"
		r.form = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json|application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
