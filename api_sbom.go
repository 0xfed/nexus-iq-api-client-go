/*
Sonatype Lifecycle Public REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.175.0-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sonatypeiq

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SbomAPIService SbomAPI service
type SbomAPIService service

type ApiDeleteSbomVersionRequest struct {
	ctx context.Context
	ApiService *SbomAPIService
	applicationId string
	sbomVersion string
}

func (r ApiDeleteSbomVersionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSbomVersionExecute(r)
}

/*
DeleteSbomVersion Delete sbom version

Deletes a specific sbom version including it's original contents and updates

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId The internal id of the application
 @param sbomVersion URL Encoded version value of the sbom to be deleted
 @return ApiDeleteSbomVersionRequest
*/
func (a *SbomAPIService) DeleteSbomVersion(ctx context.Context, applicationId string, sbomVersion string) ApiDeleteSbomVersionRequest {
	return ApiDeleteSbomVersionRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
		sbomVersion: sbomVersion,
	}
}

// Execute executes the request
func (a *SbomAPIService) DeleteSbomVersionExecute(r ApiDeleteSbomVersionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SbomAPIService.DeleteSbomVersion")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/sbom/{applicationId}/version/{sbomVersion}"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sbomVersion"+"}", url.PathEscape(parameterValueToString(r.sbomVersion, "sbomVersion")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetImportStatusRequest struct {
	ctx context.Context
	ApiService *SbomAPIService
	applicationId string
	importRequestId string
}

func (r ApiGetImportStatusRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetImportStatusExecute(r)
}

/*
GetImportStatus Get sbom import status

Gets status of a sbom import.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId The internal id of the application
 @param importRequestId The id of the import request
 @return ApiGetImportStatusRequest
*/
func (a *SbomAPIService) GetImportStatus(ctx context.Context, applicationId string, importRequestId string) ApiGetImportStatusRequest {
	return ApiGetImportStatusRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
		importRequestId: importRequestId,
	}
}

// Execute executes the request
func (a *SbomAPIService) GetImportStatusExecute(r ApiGetImportStatusRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SbomAPIService.GetImportStatus")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/sbom/{applicationId}/status/{importRequestId}"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"importRequestId"+"}", url.PathEscape(parameterValueToString(r.importRequestId, "importRequestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetListOfSbomsForApplicationIdRequest struct {
	ctx context.Context
	ApiService *SbomAPIService
	applicationId string
	sortByDate *string
	pageSize *int32
	page *int32
}

// Sort results by import date. Allowed values [asc|desc]. default &#x3D; asc
func (r ApiGetListOfSbomsForApplicationIdRequest) SortByDate(sortByDate string) ApiGetListOfSbomsForApplicationIdRequest {
	r.sortByDate = &sortByDate
	return r
}

// Number of items to return by page. default &#x3D; 10
func (r ApiGetListOfSbomsForApplicationIdRequest) PageSize(pageSize int32) ApiGetListOfSbomsForApplicationIdRequest {
	r.pageSize = &pageSize
	return r
}

// Current page number. default &#x3D; 1
func (r ApiGetListOfSbomsForApplicationIdRequest) Page(page int32) ApiGetListOfSbomsForApplicationIdRequest {
	r.page = &page
	return r
}

func (r ApiGetListOfSbomsForApplicationIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetListOfSbomsForApplicationIdExecute(r)
}

/*
GetListOfSbomsForApplicationId Gets a paginated list of SBOMs for an application

Gets a paginated list of SBOMs for an application

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId The internal id of the application
 @return ApiGetListOfSbomsForApplicationIdRequest
*/
func (a *SbomAPIService) GetListOfSbomsForApplicationId(ctx context.Context, applicationId string) ApiGetListOfSbomsForApplicationIdRequest {
	return ApiGetListOfSbomsForApplicationIdRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
	}
}

// Execute executes the request
func (a *SbomAPIService) GetListOfSbomsForApplicationIdExecute(r ApiGetListOfSbomsForApplicationIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SbomAPIService.GetListOfSbomsForApplicationId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/sbom/application/{applicationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sortByDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortByDate", r.sortByDate, "")
	} else {
		var defaultValue string = "asc"
		r.sortByDate = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 10
		r.pageSize = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSbomComponentsRequest struct {
	ctx context.Context
	ApiService *SbomAPIService
	applicationId string
	sbomVersion string
}

func (r ApiGetSbomComponentsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetSbomComponentsExecute(r)
}

/*
GetSbomComponents Gets the components found in a specific sbom version

Lists the components in a specific sbom version with data about vulnerabilities and licenses

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId The internal id of the application
 @param sbomVersion URL Encoded version value of the sbom to query its components
 @return ApiGetSbomComponentsRequest
*/
func (a *SbomAPIService) GetSbomComponents(ctx context.Context, applicationId string, sbomVersion string) ApiGetSbomComponentsRequest {
	return ApiGetSbomComponentsRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
		sbomVersion: sbomVersion,
	}
}

// Execute executes the request
func (a *SbomAPIService) GetSbomComponentsExecute(r ApiGetSbomComponentsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SbomAPIService.GetSbomComponents")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/sbom/{applicationId}/version/{sbomVersion}/components"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sbomVersion"+"}", url.PathEscape(parameterValueToString(r.sbomVersion, "sbomVersion")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSbomVersionRequest struct {
	ctx context.Context
	ApiService *SbomAPIService
	applicationId string
	sbomVersion string
	state *string
	accept *string
}

// The state of the sbom version. Allowed values [original|current]. default &#x3D; current
func (r ApiGetSbomVersionRequest) State(state string) ApiGetSbomVersionRequest {
	r.state = &state
	return r
}

// Output format(json/xml) of the sbom. Changing the output format only applicable when downloading the current form of the SBOM. The original sbom will always return in the original form that it was ingested. When requesting &#x60;current&#x60; form and if this header value is not present the sbom will be returned in its original ingested format. Allowed values {&#39;application/json&#39;|&#39;application/xml&#39;}. default &#x3D; null
func (r ApiGetSbomVersionRequest) Accept(accept string) ApiGetSbomVersionRequest {
	r.accept = &accept
	return r
}

func (r ApiGetSbomVersionRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetSbomVersionExecute(r)
}

/*
GetSbomVersion Gets a sbom version

Downloads a specific sbom version in its original or current form

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId The internal id of the application
 @param sbomVersion URL Encoded version value of the sbom
 @return ApiGetSbomVersionRequest
*/
func (a *SbomAPIService) GetSbomVersion(ctx context.Context, applicationId string, sbomVersion string) ApiGetSbomVersionRequest {
	return ApiGetSbomVersionRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
		sbomVersion: sbomVersion,
	}
}

// Execute executes the request
func (a *SbomAPIService) GetSbomVersionExecute(r ApiGetSbomVersionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SbomAPIService.GetSbomVersion")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/sbom/{applicationId}/version/{sbomVersion}"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sbomVersion"+"}", url.PathEscape(parameterValueToString(r.sbomVersion, "sbomVersion")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "")
	} else {
		var defaultValue string = "current"
		r.state = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json|application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept", r.accept, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSbomVersionListByApplicationRequest struct {
	ctx context.Context
	ApiService *SbomAPIService
	applicationId string
}

func (r ApiGetSbomVersionListByApplicationRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetSbomVersionListByApplicationExecute(r)
}

/*
GetSbomVersionListByApplication Gets a list of sbom versions by application id

Gets a list of sbom versions by application id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param applicationId The internal id of the application
 @return ApiGetSbomVersionListByApplicationRequest
*/
func (a *SbomAPIService) GetSbomVersionListByApplication(ctx context.Context, applicationId string) ApiGetSbomVersionListByApplicationRequest {
	return ApiGetSbomVersionListByApplicationRequest{
		ApiService: a,
		ctx: ctx,
		applicationId: applicationId,
	}
}

// Execute executes the request
func (a *SbomAPIService) GetSbomVersionListByApplicationExecute(r ApiGetSbomVersionListByApplicationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SbomAPIService.GetSbomVersionListByApplication")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/sbom/sbomVersions/{applicationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiImportSbomRequest struct {
	ctx context.Context
	ApiService *SbomAPIService
	importSbomRequest *ImportSbomRequest
}

func (r ApiImportSbomRequest) ImportSbomRequest(importSbomRequest ImportSbomRequest) ApiImportSbomRequest {
	r.importSbomRequest = &importSbomRequest
	return r
}

func (r ApiImportSbomRequest) Execute() (*http.Response, error) {
	return r.ApiService.ImportSbomExecute(r)
}

/*
ImportSbom Import a new sbom version

Imports a new sbom version to an existing application

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiImportSbomRequest
*/
func (a *SbomAPIService) ImportSbom(ctx context.Context) ApiImportSbomRequest {
	return ApiImportSbomRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SbomAPIService) ImportSbomExecute(r ApiImportSbomRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SbomAPIService.ImportSbom")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/sbom/import"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.importSbomRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
